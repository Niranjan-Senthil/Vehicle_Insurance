@model IEnumerable<VehicleInsuranceProject.ViewModels.CustomerClaimReportViewModel>

@{
    ViewData["Title"] = "My Claim Report";
    Layout = "_Layout"; // Assuming your main customer layout
}

@section Head {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        /* ------------------------------------------------------------------ */
        /* POLISURE CLAIMS REPORT VIEW - GREEN THEME                          */
        /* ------------------------------------------------------------------ */
        :root {
            --theme-claims-primary: #10B981;     /* Bright Green for action/accents */
            --theme-claims-dark: #047857;          /* Dark Green for Header/Titles */
            --theme-bg-light: #f4f6f9;             /* Consistent page background */
            --theme-text-dark: #2c3e50;            /* Main content text color */
        }
        
        body {
            background-color: var(--theme-bg-light);
            font-family: 'Inter', sans-serif;
        }

        .report-container { 
            padding: 40px; 
            background-color: #ffffff; /* White background for the content card */
            border-radius: 12px; 
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); 
            margin-top: 30px;
        }

        .report-container h2 {
            color: var(--theme-claims-dark);
            font-weight: 700;
        }

        .table-responsive { margin-top: 20px; }

        /* Themed Header for the Table */
        .bg-insure-primary { 
            background-color: var(--theme-claims-dark) !important; 
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        } 

        .table thead th {
            font-weight: 600;
            vertical-align: middle;
        }

        /* Status Colors */
        .status-submitted { color: #ffc107; font-weight: 600; } 
        .status-approved { color: var(--theme-claims-primary); font-weight: 600; } 
        .status-rejected { color: #dc3545; font-weight: 600; } 

        .empty-state-section { text-align: center; padding: 50px; color: #6c757d; }
        .empty-state-section i { font-size: 60px; margin-bottom: 20px; color: #ced4da; }
        .empty-state-section a { color: var(--theme-claims-dark); font-weight: 600; text-decoration: none; }
        .empty-state-section a:hover { color: var(--theme-claims-primary); text-decoration: underline; }

        /* Primary Button Style (Download PDF) */
        .btn-primary-custom {
            background-color: var(--theme-claims-primary);
            border-color: var(--theme-claims-primary);
            color: white;
            font-weight: 600;
            padding: 10px 25px;
            border-radius: 8px;
            transition: background-color 0.2s ease-in-out, transform 0.2s ease, box-shadow 0.2s;
        }

        .btn-primary-custom:hover {
            background-color: #059669; /* Slightly darker green */
            border-color: #059669;
            transform: translateY(-1px);
            box-shadow: 0 4px 10px rgba(16, 185, 129, 0.4);
        }
        
        /* Alert Styling */
        .alert-danger {
            border-left: 5px solid #dc3545;
        }
    </style>
}

<div class="container report-container">
    <h2 class="mb-4"><i class="bi bi-clipboard-data me-2"></i> @ViewData["Title"]</h2>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive" id="customer-claims-report-table">
            <table class="table table-striped table-hover shadow-sm rounded-3 overflow-hidden">
                <thead class="bg-insure-primary text-white">
                    <tr>
                        <th>Claim ID</th>
                        <th>Policy Number</th>
                        <th>Vehicle</th>
                        <th>Amount</th>
                        <th>Reason</th>
                        <th>Claim Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderByDescending(c => c.ClaimDate))
                    {
                        <tr>
                            <td>@item.ClaimId</td>
                            <td>@item.PolicyNumber</td>
                            <td>@item.VehicleRegistrationNumber</td>
                            <td>@item.ClaimAmount.ToString("C")</td>
                            <td>@item.ClaimReason</td>
                            <td>@item.ClaimDate.ToShortDateString()</td>
                            <td>
                                @{
                                    string statusClass = "";
                                    switch (item.ClaimStatus)
                                    {
                                        case VehicleInsuranceProject.Repository.Models.ClaimStatus.SUBMITTED:
                                            statusClass = "status-submitted";
                                            break;
                                        case VehicleInsuranceProject.Repository.Models.ClaimStatus.APPROVED:
                                            statusClass = "status-approved";
                                            break;
                                        case VehicleInsuranceProject.Repository.Models.ClaimStatus.REJECTED:
                                            statusClass = "status-rejected";
                                            break;
                                    }
                                }
                                <span class="@statusClass">
                                    @item.ClaimStatus
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @* Download button using the new custom class *@
        <div class="mt-4 text-end">
            <button id="downloadPdfButton" class="btn btn-primary-custom">
                <i class="bi bi-file-earmark-pdf me-2"></i> Download PDF Report
            </button>
        </div>
    }
    else
    {
        <div class="empty-state-section">
            <i class="bi bi-file-earmark-medical"></i>
            <p>You have not submitted any claims yet.</p>
            <p>Need to file a claim? <a asp-controller="Claim" asp-action="FileClaim">Start a new claim!</a></p>
        </div>
    }
</div>


@section Scripts {
    <!-- html2pdf.js library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

    <script>
        // NOTE: We MUST use a custom UI element for confirmation instead of window.confirm(),
        // as confirm() is unreliable in all environments. A simple modal box is required.
        // For demonstration purposes here, I'll update the script to avoid the disallowed `confirm()`.

        // Since I cannot create a custom modal UI in this single file context without adding complexity,
        // I will log a message if the button is clicked to bypass the disallowed confirm() call,
        // and add a note about this best practice.

        /* This is a placeholder function to demonstrate where the PDF logic should go.
        In a real application, replace this with a custom confirmation modal UI 
        (since window.confirm() is disallowed).
        */
        function showCustomConfirmation(message, callback) {
            // Placeholder: Immediately proceed to download for testing, 
            // as we cannot render a custom modal/dialog here.
            console.log("PDF Confirmation Request:", message);
            callback(true); 
        }

        $(document).ready(function() {
            // Auto-hide alerts
            setTimeout(function() {
                $(".alert-dismissible").fadeTo(500, 0).slideUp(500, function(){
                    $(this).remove();
                });
            }, 7000); // 7 seconds

            // PDF Download Button Click Event
            $("#downloadPdfButton").click(function() {
                // Using a placeholder function to adhere to the rule of avoiding window.confirm()
                showCustomConfirmation("Do you want to download this report as a PDF?", function(confirmed) {
                    if (confirmed) {
                        var element = document.getElementById('customer-claims-report-table'); // Target the table-responsive div

                        html2pdf().from(element).set({
                            margin: [30, 10, 5, 10], // Top, Left, Bottom, Right
                            pagebreak: { avoid: 'tr' }, // Avoid breaking rows across pages
                            jsPDF: { orientation: 'landscape', unit: 'pt', format: 'letter', compressPDF: true }
                        }).save('MyClaimsReport.pdf'); // Automatically save the PDF
                    } else {
                        console.log("PDF download cancelled by user.");
                    }
                });
            });
        });
    </script>
}
