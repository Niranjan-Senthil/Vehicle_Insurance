@model IEnumerable<VehicleInsuranceProject.Repository.Models.CoverageLevel>
@using System;

@{
    ViewData["Title"] = "Manage Coverage Levels";
    Layout = "_Layout"; // Ensure this matches your main layout or admin layout
}

@section Head {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        .dashboard-container {
            padding-top: 30px;
            padding-bottom: 30px;
        }

        .table-responsive {
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .table thead {
            background-color: #6f42c1; /* Purple for coverage levels */
            color: white;
        }

        .table th, .table td {
            padding: 12px 15px;
            vertical-align: middle;
            white-space: normal; /* Allow text to wrap within cells */
        }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: rgba(0, 0, 0, 0.03);
        }

        .btn-action {
            width: 38px;
            height: 38px;
            display: inline-flex; /* Keep inline-flex for the button itself */
            align-items: center;
            justify-content: center;
            padding: 0;
            border-radius: 0.375rem;
            /* No margin-bottom here, it's handled by gap on parent td */
        }

            .btn-action i {
                font-size: 1.1em;
            }

        /* Specific button colors for actions */
        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
            color: white;
        }

            .btn-info:hover {
                background-color: #138496;
                border-color: #117a8b;
            }

        .btn-warning {
            background-color: #ffc107;
            border-color: #ffc107;
            color: #212529;
        }

            .btn-warning:hover {
                background-color: #e0a800;
                border-color: #d39e00;
            }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
            color: white;
        }

            .btn-danger:hover {
                background-color: #c82333;
                border-color: #bd2130;
            }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            color: white;
        }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #0054b3;
            }
    </style>
}

<div class="container dashboard-container">
    <h2 class="mb-4"><i class="bi bi-sliders me-2"></i> @ViewData["Title"]</h2>

    @* Display Success/Error Messages using TempData *@
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
            <i class="bi bi-x-circle-fill me-2"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="mb-3 d-flex justify-content-end">
        <a asp-action="CreateCoverageLevel" asp-controller="Admin" class="btn btn-primary">
            <i class="bi bi-plus-circle me-2"></i> Add New Coverage Level
        </a>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover rounded-3 overflow-hidden">
                <thead>
                    <tr>
                        <th>@Html.DisplayNameFor(model => model.Name)</th>
                        <th>@Html.DisplayNameFor(model => model.Description)</th>
                        <th>@Html.DisplayNameFor(model => model.PremiumMultiplier)</th>
                        <th>@Html.DisplayNameFor(model => model.CoverageMultiplier)</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Name)</td>
                            <td>@Html.DisplayFor(modelItem => item.Description)</td>
                            <td>@Html.DisplayFor(modelItem => item.PremiumMultiplier)</td>
                            <td>@Html.DisplayFor(modelItem => item.CoverageMultiplier)</td>
                            @* The flexbox classes here are crucial for responsiveness and spacing *@
                            <td class="text-center d-flex justify-content-center align-items-center flex-wrap gap-2">
                                <a asp-action="CoverageLevelDetails" asp-controller="Admin" asp-route-id="@item.CoverageLevelId" class="btn btn-info btn-action" title="Details">
                                    <i class="bi bi-eye"></i>
                                </a>
                                <a asp-action="EditCoverageLevel" asp-controller="Admin" asp-route-id="@item.CoverageLevelId" class="btn btn-warning btn-action" title="Edit">
                                    <i class="bi bi-pencil"></i>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info text-center mt-4" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i> No coverage levels defined. Please add some.
        </div>
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function() {
            setTimeout(function() {
                $(".alert-dismissible").fadeTo(500, 0).slideUp(500, function(){
                    $(this).remove();
                });
            }, 7000); // 7 seconds
        });
    </script>
}
