@model IEnumerable<VehicleInsuranceProject.ViewModels.AdminPolicyViewModel>
@using VehicleInsuranceProject.Repository.Models; @* For PolicyStatus and VehicleType enums *@
@using System; @* Added for Convert.ToString() *@

@{
    ViewData["Title"] = "Manage Customer Policies";
    Layout = "_Layout"; // Use your main layout or an admin-specific layout if you have one

    // Fixed placeholder text for simplified search
    string placeholderText = "Search by Policy Number, Customer Name, or Vehicle Number...";
}

@section Head {
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
        <style>
            .dashboard-container {
                padding-top: 30px;
                padding-bottom: 30px;
            }

            .table-responsive {
                border-radius: 8px;
                overflow: hidden;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            }

            .table thead {
            background-color: #007bff; 
                color: white;
            }

       
    
            .table th, .table td {
                padding: 12px 15px;
                vertical-align: middle;
            }

            .table-striped tbody tr:nth-of-type(odd) {
                background-color: rgba(0, 0, 0, 0.03);
            }

            .badge {
                font-size: 0.85em;
                padding: 0.4em 0.7em;
                border-radius: 0.375rem;
            }

            .btn-action {
                width: 38px; /* Fixed width for consistent button size */
                height: 38px;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                padding: 0; /* Remove padding */
                border-radius: 0.375rem; /* Match badge/input roundedness */
            }
            .btn-action i {
                font-size: 1.1em;
            }

            /* Specific button colors for admin actions */
            .btn-info { background-color: #17a2b8; border-color: #17a2b8; color: white; }
            .btn-info:hover { background-color: #138496; border-color: #117a8b; }

            .btn-warning { background-color: #ffc107; border-color: #ffc107; color: #212529; }
            .btn-warning:hover { background-color: #e0a800; border-color: #d39e00; }

            .btn-success { background-color: #28a745; border-color: #28a745; color: white; }
            .btn-success:hover { background-color: #218838; border-color: #1e7e34; }

            .btn-danger { background-color: #dc3545; border-color: #dc3545; color: white; }
            .btn-danger:hover { background-color: #c82333; border-color: #bd2130; }

            .form-control-search {
                border-radius: 0.375rem;
            }
        </style>
}

<div class="container dashboard-container">
    <h2 class="mb-4"><i class="bi bi-person-lines-fill me-2"></i> @ViewData["Title"]</h2>

    @* Display Success/Error Messages using TempData *@
    @if (TempData["SuccessMessage"] != null)
    {
            <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
                <i class="bi bi-check-circle-fill me-2"></i> @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
            <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
                <i class="bi bi-x-circle-fill me-2"></i> @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
    }

    <div class="mb-3">
        <form asp-controller="Admin" asp-action="ViewPolicies" method="get" class="d-flex">
            <input type="text" name="searchString" class="form-control me-2" placeholder="@placeholderText" value="@ViewBag.CurrentSearchString" />
            <button type="submit" class="btn btn-primary"><i class="bi bi-search"></i> Search</button>
            @* Conditional Clear button based on searchString existence *@
            @if (!string.IsNullOrWhiteSpace(ViewBag.CurrentSearchString))
            {
                    <a asp-action="ViewPolicies" class="btn btn-outline-secondary ms-2">Clear Search</a>
            }
        </form>
    </div>

    @if (Model != null && Model.Any())
    {
            <div class="table-responsive">
                <table class="table table-striped table-hover rounded-3 overflow-hidden">
                    <thead>
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.PolicyNumber)</th>
                            <th>@Html.DisplayNameFor(model => model.CustomerName)</th>
                            <th>@Html.DisplayNameFor(model => model.VehicleRegistrationNumber)</th>
                            <th>@Html.DisplayNameFor(model => model.CoverageLevelName)</th>
                            <th>@Html.DisplayNameFor(model => model.StartDate)</th>
                            <th>@Html.DisplayNameFor(model => model.EndDate)</th>
                            <th>@Html.DisplayNameFor(model => model.PolicyStatus)</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in Model)
                    {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.PolicyNumber)</td>
                                    <td>@Html.DisplayFor(modelItem => item.CustomerName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.VehicleRegistrationNumber)</td>
                                    <td>@Html.DisplayFor(modelItem => item.CoverageLevelName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.StartDate)</td>
                                    <td>@Html.DisplayFor(modelItem => item.EndDate)</td>
                                    <td>
                                        <span class="badge @(item.PolicyStatus == PolicyStatus.ACTIVE ? "bg-success" : "bg-danger")">
                                    @Html.DisplayFor(modelItem => item.PolicyStatus)
                                        </span>
                                    </td>
                                    <td class="text-center">
                                @* Details button - Always present *@
                                        <a asp-action="PolicyDetails" asp-route-policyId="@item.PolicyId" class="btn btn-info btn-action" title="Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                @* Edit button - Always present *@
                                        <a asp-action="EditPolicy" asp-route-policyId="@item.PolicyId" class="btn btn-warning btn-action ms-1" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </a>

                                @* Deactivate button - only if active *@
                                @if (item.PolicyStatus == PolicyStatus.ACTIVE)
                                {
                                                <form asp-action="DeactivatePolicy" asp-route-policyId="@item.PolicyId" method="post" class="d-inline ms-1">
                                        @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-danger btn-action" title="Deactivate Policy" onclick="return confirm('Are you sure you want to deactivate this policy? It will be marked as EXPIRED and its end date set to today.');">
                                                        <i class="bi bi-power"></i>
                                                    </button>
                                                </form>
                                }
                                else
                                {
                                                <button class="btn btn-secondary btn-action ms-1" title="Policy is already inactive" disabled>
                                                    <i class="bi bi-power"></i>
                                                </button>
                                }

                                @* Renew button - Conditionally enabled/disabled based on end date and status *@
                                @{
                                    bool isRenewable = (item.PolicyStatus == PolicyStatus.ACTIVE && (item.EndDate - DateTime.Today).TotalDays <= 15 && (item.EndDate - DateTime.Today).TotalDays >= 0) ||
                                                       item.PolicyStatus == PolicyStatus.EXPIRED;
                                    string renewButtonClass = isRenewable ? "btn-success" : "btn-secondary";
                                    string renewButtonTitle = isRenewable ? "Renew Policy" : "Renewal available 15 days before expiry or after expiry";
                                }
                                        <a asp-action="RenewPolicy" asp-controller="Admin" asp-route-policyId="@item.PolicyId" class="btn @renewButtonClass btn-action ms-1 @(isRenewable ? "" : "disabled")" title="@renewButtonTitle">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </a>
                                    </td>
                                </tr>
                    }
                    </tbody>
                </table>
            </div>
    }
    else
    {
            <div class="alert alert-info text-center mt-4" role="alert">
                <i class="bi bi-info-circle-fill me-2"></i> No policies found.
            </div>
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
        <script>
            $(document).ready(function() {
                setTimeout(function() {
                    $(".alert-dismissible").fadeTo(500, 0).slideUp(500, function(){
                        $(this).remove();
                    });
                }, 7000); // 7 seconds
            });
        </script>
}
