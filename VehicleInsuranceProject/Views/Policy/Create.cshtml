@model VehicleInsuranceProject.Repository.Models.Policy

@{
    ViewData["Title"] = "Create New Policy";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Assuming the default layout
}

@section Head {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    @* jQuery is required for the AJAX logic in the script section below *@
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
}

<div class="container py-5 policy-bg-container">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <h2 class="mb-4 text-center fw-bolder text-dark-blue display-5">
                <i class="bi bi-file-earmark-plus me-3"></i> @ViewData["Title"]
            </h2>

            @* Custom message box for AJAX errors/status, replacing alert() *@
            <div id="calculationStatus" class="alert d-none mt-3" role="alert" style="display: none;"></div>

            @* Main Card for the form *@
            <div class="card shadow-xl p-5 rounded-4 border-0">
                
                @* Display Server Errors from Controller *@
                <div asp-validation-summary="ModelOnly" class="alert alert-danger mb-4 rounded-3" role="alert"></div>

                <form asp-action="Create" method="post">
                    @Html.AntiForgeryToken()

                    <div class="row g-4">
                        <div class="col-md-6">
                            <label asp-for="vehicleId" class="form-label text-dark-blue fw-semibold">Select Vehicle <span class="text-danger">*</span></label>
                            <select asp-for="vehicleId" id="vehicleId" class="form-select form-control-lg rounded-3 shadow-sm" asp-items="ViewBag.Vehicles" required>
                                <option value="">-- Select a Vehicle --</option>
                            </select>
                            <span asp-validation-for="vehicleId" class="text-danger small mt-1 d-block"></span>
                        </div>
                        
                        <div class="col-md-6">
                            <label asp-for="CoverageLevelId" class="form-label text-dark-blue fw-semibold">Coverage Level <span class="text-danger">*</span></label>
                            <select asp-for="CoverageLevelId" id="CoverageLevelId" class="form-select form-control-lg rounded-3 shadow-sm" asp-items="ViewBag.CoverageLevels" required>
                                <option value="">-- Select Coverage Level --</option>
                            </select>
                            <span asp-validation-for="CoverageLevelId" class="text-danger small mt-1 d-block"></span>
                        </div>
                        
                        <div class="col-md-6">
                            <label asp-for="startDate" class="form-label text-dark-blue fw-semibold">Start Date <span class="text-danger">*</span></label>
                            <input asp-for="startDate" type="date" class="form-control form-control-lg rounded-3 shadow-sm" required/>
                            <span asp-validation-for="startDate" class="text-danger small mt-1 d-block"></span>
                        </div>
                        
                        <div class="col-md-6">
                            <label asp-for="endDate" class="form-label text-dark-blue fw-semibold">End Date <span class="text-danger">*</span></label>
                            <input asp-for="endDate" type="date" class="form-control form-control-lg rounded-3 shadow-sm" required/>
                            <span asp-validation-for="endDate" class="text-danger small mt-1 d-block"></span>
                        </div>

                        <!-- Calculated fields: Premium and Coverage Amount -->
                        <div class="col-md-6">
                            <label asp-for="premiumAmount" class="form-label text-dark-blue fw-semibold">Calculated Premium Amount</label>
                            <input asp-for="premiumAmount" id="premiumAmount" class="form-control form-control-lg rounded-3 shadow-sm bg-light" type="number" step="0.01" min="0.01" readonly /> 
                            <span asp-validation-for="premiumAmount" class="text-danger small mt-1 d-block"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="coverageAmount" class="form-label text-dark-blue fw-semibold">Calculated Coverage Amount</label>
                            <input asp-for="coverageAmount" id="coverageAmount" class="form-control form-control-lg rounded-3 shadow-sm bg-light" type="number" step="0.01" min="0.01" readonly /> 
                            <span asp-validation-for="coverageAmount" class="text-danger small mt-1 d-block"></span>
                        </div>

                        <!-- Hidden fields for policyNumber and policyStatus, handled by service -->
                        <input type="hidden" asp-for="policyNumber" />
                        <input type="hidden" asp-for="policyStatus" />
                    </div>

                    <div class="mt-5 d-flex justify-content-between align-items-center">
                        <a asp-action="ViewPolicies" class="btn btn-outline-secondary rounded-pill px-4 py-2 fw-bold">
                            <i class="bi bi-arrow-left me-2"></i> Back to Policies
                        </a>
                        <button type="submit" class="btn btn-policy-primary btn-lg rounded-pill px-5 py-2 fw-bold">
                            <i class="bi bi-save me-2"></i> Create Policy
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Function to display status messages (replaces alert())
        function showStatusMessage(message, type = 'danger') {
            const statusBox = $('#calculationStatus');
            // Remove previous classes and add the new one, show the box
            statusBox.removeClass('alert-danger alert-success alert-warning d-none').addClass('alert-' + type).html(message).slideDown();
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                statusBox.slideUp(function() {
                    $(this).addClass('d-none'); // Hide the element completely
                });
            }, 5000);
        }

        // Client-side logic for dynamic calculation.
        function updatePremiumAndCoverageAjax() {
            var vehicleId = $('#vehicleId').val();
            var coverageLevelId = $('#CoverageLevelId').val();

            if (vehicleId && coverageLevelId) {
                // AJAX call to a new controller action to get calculated values
                $.ajax({
                    url: '@Url.Action("CalculatePolicyValues", "Policy")', // NEW AJAX endpoint
                    type: 'GET',
                    data: { vehicleId: vehicleId, coverageLevelId: coverageLevelId }, // Pass IDs
                    success: function(data) {
                        if (data.success) {
                            $('#premiumAmount').val(data.premium.toFixed(2));
                            $('#coverageAmount').val(data.coverage.toFixed(2));
                            showStatusMessage('Policy calculation updated successfully!', 'success');
                        } else {
                            // Handle error if calculation failed on server (e.g., invalid IDs)
                            console.error("Error calculating policy values:", data.message);
                            $('#premiumAmount').val('0.00');
                            $('#coverageAmount').val('0.00');
                            showStatusMessage(`<strong>Calculation Error:</strong> ${data.message || "Please check your selections."}`, 'warning');
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        console.error("AJAX Error:", textStatus, errorThrown);
                        $('#premiumAmount').val('0.00');
                        $('#coverageAmount').val('0.00');
                        showStatusMessage("<strong>System Error:</strong> An error occurred during calculation. Please try again.", 'danger');
                    }
                });
            } else {
                // Clear fields if either selection is empty
                $('#premiumAmount').val('0.00');
                $('#coverageAmount').val('0.00');
            }
        }

        $(document).ready(function() {
            // Initial calculation on page load if values are present (e.g., after postback with errors)
            updatePremiumAndCoverageAjax();

            // Call when vehicle or coverage level changes
            $('#vehicleId, #CoverageLevelId').change(updatePremiumAndCoverageAjax);
        });
    </script>
}

<style>
    /* Styling for the Create Policy Page, consistent with the Customer views */
    
    /* Overall background */
    .policy-bg-container {
        background-color: #f0f4f8; /* Light grey/blue background */
        min-height: 80vh; 
        padding-top: 50px !important;
        padding-bottom: 50px !important;
    }
    
    .text-dark-blue {
        color: #1a237e; /* Navy Blue text for headings/labels */
    }

    /* Primary Navy Blue Color (for buttons) */
    .btn-policy-primary {
        background-color: #1a237e; /* Deep Navy Blue */
        border-color: #1a237e;
        color: white;
        transition: all 0.3s ease;
    }

    .btn-policy-primary:hover {
        background-color: #0d144b; /* Darker Navy Blue on hover */
        border-color: #0d144b;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(26, 35, 126, 0.4);
    }
    
    /* Card Styling */
    .card {
        background: #ffffff;
        border: 1px solid #e9ecef;
        border-radius: 1.5rem !important; 
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08); 
    }

    /* Input focus style override */
    .form-control:focus, .form-select:focus {
        border-color: #4B0082; /* Deep Indigo focus color */
        box-shadow: 0 0 0 0.25rem rgba(75, 0, 130, 0.25);
    }
    
    /* Override layout body background for this specific view */
    body {
        background-color: #f0f4f8 !important; 
    }
</style>
